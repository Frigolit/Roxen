# @configure_input@
SRCDIR=@srcdir@
VPATH=@srcdir@
prefix=@prefix@

@SET_MAKE@

INSTALL=@INSTALL@

CC=@CC@
CPPFLAGS=@CPPFLAGS@
CFLAGS=@REALCFLAGS@
JOINEDCFLAGS=@CFLAGS@
LDFLAGS=$(CFLAGS) @LDFLAGS@

PIKEVERSION=@PIKEVERSION@

all:	@MAKE_GMP@ @MAKE_GDBM@ @MAKE_ZLIB@ pike extern

pike: force
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS) @LINKFORSHARED@")

extern: force
	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" all)

gmp: force
	-@(cd gmp;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" all)

gdbm: force
	-@(cd gdbm;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" all)

zlib: force
	-@(cd zlib;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" libz.a)

force:

# These are here for compatibility with the easy-start makefile
easy: all
hard: all

depend:
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" depend)
	echo "You need to run configure once again."

verify: all verify_other
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" verify)

verbose_verify: all verify_other
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" verbose_verify)

verify_other:
	@if test "@MAKE_ZLIB@" = "zlib"; then \
	  $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" verify_zlib; \
	fi
	@if test "@MAKE_GMP@" = "gmp"; then \
	  $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" verify_gmp; \
	fi

verify_zlib:
	@(cd zlib;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" test)

verify_gmp:
	@(cd gmp;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" check)

new_peep_engine:
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" new_peep_engine)

check: verify

clean:
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)
	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" clean)

install_all: install_pike install

install: all install_only

install_only: 
	$(SRCDIR)/mkdir -p $(prefix)/roxen/
	@if test -d $(prefix)/roxen/server.old/.; then \
	  if test -d $(prefix)/roxen/server.older/.; then \
	    echo; \
	    echo "Warning, deleting old server \"$(prefix)/roxen/server.older\""; \
	    echo; \
	    rm -rf $(prefix)/roxen/server.older; \
	  fi; \
	  mv -f $(prefix)/roxen/server.old $(prefix)/roxen/server.older; \
	fi
	@if test -d $(prefix)/roxen/server/.; then \
	  mv -f $(prefix)/roxen/server $(prefix)/roxen/server.old ; \
	fi
	cp -r $(SRCDIR)/server $(prefix)/roxen/
	@rm -rf	$(prefix)/roxen/server/CVS $(prefix)/roxen/server/*/CVS\
		$(prefix)/roxen/server/*/*/CVS
	cp pike/$(PIKEVERSION)/src/pike $(prefix)/roxen/server/bin
	-@rm -f $(prefix)/roxen/server/bin/roxen >/dev/null 2>&1
	ln $(prefix)/roxen/server/bin/pike $(prefix)/roxen/server/bin/roxen
#	cp $(SRCDIR)/pike/$(PIKEVERSION)/bin/feature_list $(prefix)/roxen/server/bin
	test -d $(prefix)/roxen/local/. || mkdir $(prefix)/roxen/local
	test -d $(prefix)/roxen/local/modules/. || mkdir $(prefix)/roxen/local/modules
	test -d $(prefix)/roxen/local/nfonts/. || mkdir $(prefix)/roxen/local/nfonts
	test -d $(prefix)/roxen/server/lib/. || mkdir $(prefix)/roxen/server/lib
	test -d $(prefix)/roxen/server/lib/pike/. || mkdir $(prefix)/roxen/server/lib/pike
	@for d in `cd pike/$(PIKEVERSION)/src/lib; find . -type d -print`; do \
	  if test -d $(prefix)/roxen/server/lib/pike/$$d; then :; else \
	    mkdir $(prefix)/roxen/server/lib/pike/$$d || exit 1;\
	  fi; \
	done
	@for d in `cd $(SRCDIR)/pike/$(PIKEVERSION)/lib; find . -type d -print`; do \
	  if test -d $(prefix)/roxen/server/lib/pike/$$d; then :; else \
	    mkdir $(prefix)/roxen/server/lib/pike/$$d || exit 1;\
	  fi; \
	done
	@for f in `cd $(SRCDIR)/pike/$(PIKEVERSION)/lib; find . -type f -print`; do \
	  if cmp $(SRCDIR)/pike/$(PIKEVERSION)/lib/$$f $(prefix)/roxen/server/lib/pike/$$f >/dev/null 2>&1; then :; else \
	    if test -f $(prefix)/roxen/server/lib/pike/$$f; then \
	      mv -f $(prefix)/roxen/server/lib/pike/$$f $(prefix)/roxen/server/lib/pike/$$f.old; \
	    else :; fi; \
	    if cp -f $(SRCDIR)/pike/$(PIKEVERSION)/lib/$$f $(prefix)/roxen/server/lib/pike/$$f; then :; else \
	      echo "Failed to copy $$f"; \
	      exit 1; \
	    fi; \
	  fi; \
	done
	@for f in `cd pike/$(PIKEVERSION)/src/lib; find . -type f -print`; do \
	  if cmp pike/$(PIKEVERSION)/src/lib/$$f $(prefix)/roxen/server/lib/pike/$$f >/dev/null 2>&1; then :; else \
	    if test -f $(prefix)/roxen/server/lib/pike/$$f; then \
	      mv -f $(prefix)/roxen/server/lib/pike/$$f $(prefix)/roxen/server/lib/pike/$$f.old; \
	    else :; fi; \
	    if cp -f pike/$(PIKEVERSION)/src/lib/$$f $(prefix)/roxen/server/lib/pike/$$f; then :; else \
	      echo "Failed to copy $$f"; \
	      exit 1; \
	    fi; \
	  fi; \
	done
	test -d $(prefix)/roxen/server/include/. || mkdir $(prefix)/roxen/server/include
	test -d $(prefix)/roxen/server/include/pike/. || mkdir $(prefix)/roxen/server/include/pike
	for a in $(SRCDIR)/pike/$(PIKEVERSION)/src/*.h ./pike/$(PIKEVERSION)/src/*.h; do $(INSTALL) $$a $(prefix)/roxen/server/include/pike; done
	-@(cd extern;$(MAKE) install "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)";cd ../)
	-@$(SRCDIR)/mkdir -p $(prefix)/roxen/logs
	-@$(SRCDIR)/mkdir -p $(prefix)/roxen/configurations
	-chmod a+x $(prefix)
	-chmod a+x $(prefix)/roxen
	-chmod a+x $(prefix)/roxen/server
	-@for d in fonts nfonts modules etc bin base_server more_modules \
		   config_actions server_templates \
	           languages roxen-images protocols unfinishedmodules; do \
	  echo Modifying permissions for directory $(prefix)/roxen/server/$$d... ; \
	  find $(prefix)/roxen/server/$$d -type d -exec chmod a+x '{}' \; ; \
	  chmod -R a+r $(prefix)/roxen/server/$$d ;\
	done
	-@for f in BUGS CHANGES CONTRIBUTORS COPYING GPL INSTALLING \
		README README.ssl3 TODO; do \
	  if test -f $(SRCDIR)/$f ; then \
	    echo Copying $f...; cp $(SRCDIR)/$f $(prefix)/roxen/$f; \
	  else :; fi; \
	done
	-@for f in cgi fcgi install.pike pdbi.pike pike roxen roxen_hostname; \
	do \
	  if test -f $(prefix)/roxen/server/bin/$$f ; then \
	    echo Modifying permissions for file $(prefix)/roxen/server/bin/$$f... ; \
	    chmod a+rx $(prefix)/roxen/server/bin/$$f; \
	  else :; fi; \
	done
	@echo Roxen installed.

install_pike: all
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" install)

localinstall: all
	cp pike/$(PIKEVERSION)/src/pike $(SRCDIR)/server/bin/
	-@rm -f $(SRCDIR)/server/bin/roxen >/dev/null 2>&1
	ln $(SRCDIR)/server/bin/pike $(SRCDIR)/server/bin/roxen
	@for d in lib lib/pike; do \
	  if [ -d "$(SRCDIR)/server/$$d/." ]; then : ; else \
	    echo "$$d"; \
	    mkdir "$(SRCDIR)/server/$$d" || exit 1; \
	    chmod a+rx "$(SRCDIR)/server/$$d/."; \
	    chmod u+w "$(SRCDIR)/server/$$d/."; \
	  fi; \
	done
	@for sd in pike/$(PIKEVERSION)/src/lib pike/$(PIKEVERSION)/src/share; do \
	  (if cd $$sd >/dev/null 2>&1; then \
	    echo "Updating from $$sd"; \
	    for d in `find . -type d -print`; do \
	      if [ -d "$(SRCDIR)/server/lib/pike/$$d/." ]; then : ; else \
		echo "$$sd/$$d"; \
		mkdir "$(SRCDIR)/server/lib/pike/$$d" || exit 1; \
		chmod a+rx "$(SRCDIR)/server/lib/pike/$$d/."; \
		chmod u+w "$(SRCDIR)/server/lib/pike/$$d/."; \
	      fi; \
	    done; \
	    for f in `find . -type f -print`; do \
	      if cmp "$(SRCDIR)/server/lib/pike/$$f" "$$f" >/dev/null 2>&1 ; \
	      then : ; else \
		echo "$$sd/$$f"; \
		if [ -f "$(SRCDIR)/server/lib/pike/$$f" ]; then \
		  mv -f "$(SRCDIR)/server/lib/pike/$$f" "$(SRCDIR)/server/lib/pike/$$f.old"; \
		else : ; fi; \
		cp "$$f" "$(SRCDIR)/server/lib/pike/$$f" || exit 1; \
		chmod a+r "$(SRCDIR)/server/lib/pike/$$f"; \
		chmod u+w "$(SRCDIR)/server/lib/pike/$$f"; \
	      fi ; \
	    done; \
          else : ; fi); \
	done
	(cd extern; $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" localinstall)

spotless:  clean
	@(cd extern;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	@(cd pike/$(PIKEVERSION)/src;$(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" spotless)
	rm -f server/bin/selfdir server/bin/roxen_hostname pike/$(PIKEVERSION)/src/pike\
	pike/$(PIKEVERSION)/src/pike.old server/bin/proxygarb 
	find . '(' -name '#*#' -o -name '*~' -o -name '.*~' -o -name '*.bak'\
        -o -name '.pine-debug*' -o -name '.*.bak' -o -name core -o -name \
	config.cache -o -name config.status -o -name config.log -o -name \
	"*.a" ')'  -print -exec /bin/rm '{}'  ';'
	rm -rf server/logs
	rm -rf logs


distribute:	spotless
	@(cd extern; $(MAKE) "prefix=$(prefix)" "CC=$(CC)" "LDFLAGS=$(LDFLAGS)" distribute)

run_autoconfig:
	@(cd $(SRCDIR); pike/$(PIKEVERSION)/src/run_autoconfig .)

weak_cleanup:
	@for f in `find $(SRCDIR) -type f -name '*~' -print` \
	  `find $(SRCDIR) -type f -name '.#*' -print` \
	  `find $(SRCDIR) -type f -name '#*' -print`; do \
	  echo $$f; rm $$f || exit 1; \
	done

./Makefile: $(SRCDIR)/Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="" ./config.status
	@echo "Run make again"
	@exit 1

bump_version.stamp:
	@touch bump_version.stamp

bump_version: bump_version.stamp
	@if test -f $(SRCDIR)/server/base_server/roxen.pike.new; then \
	  echo Deleting old $(SRCDIR)/server/base_server/roxen.pike.new...; \
	  rm $(SRCDIR)/server/base_server/roxen.pike.new || exit 1; \
	else : ; fi
	@(cd $(SRCDIR); \
	  echo Updating sources...; \
	  if cvs -q update -dA|egrep '^[CM?]'; then exit 1; else : ; fi; \
	)
	@(cd $(SRCDIR)/server/base_server; \
	  echo Bumping version...; \
	  build=`sed <roxen.pike -e'/__roxen_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  newbuild=`echo $$build 1+p|dc`; \
	  sed <roxen.pike -e"/__roxen_build__/s/$$build/$$newbuild/" >roxen.pike.new; \
	  checkbuild=`sed <roxen.pike.new -e'/__roxen_build__/s/[^0-9]*//gp' -ed|head -1`; \
	  if test "x$$newbuild" = "x$$checkbuild"; then \
	    mv -f roxen.pike.new roxen.pike || exit 1; \
	    echo "Successfull bump to build $$newbuild."; \
	  else \
	    echo "Version bump failed: $$newbuild != $$checkbuild."; \
	    exit 1; \
	  fi; \
	  version=`sed <roxen.pike -e'/__roxen_version__/s/[^.0-9]*//gp' -ed|head -1`; \
	  cvs ci -m "Version bumped to $$version.$$newbuild by bump_version." roxen.pike || exit 1; \
	  echo "Roxen $$version.$$newbuild" >../../VERSION; \
	  cat ../../VERSION; \
	)
	@(cd $(SRCDIR); \
	  echo Tagging...; \
	  cvs tag `cat VERSION | tr 'A-Z. ' 'a-z__'`||exit 1; \
	)
	@touch bump_version

ChangeLog.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike | gzip -9 > ChangeLog.gz

ChangeLog.rxml.gz:
	cd $(SRCDIR); pike tools/make_changelog.pike --rxml |gzip -9 > ChangeLog.rxml.gz


pre_dist: bump_version weak_cleanup run_autoconfig depend
	@(cd pike; $(MAKE) pre_dist)

dist: ChangeLog.gz ChangeLog.rxml.gz
	@if test -f $(SRCDIR)/VERSION; then :; else \
	  echo 'You need to make pre_dist first!'; \
	  exit 1; \
	fi
	@version=`cat $(SRCDIR)/VERSION | tr 'A-Z ' 'a-z_'`; \
	if ls -d $$version* >/dev/null 2>&1; then \
	  echo Deleting old distributions...; \
	  rm -rf $$version* || exit 1; \
	else :; fi; \
	mkdir $$version; \
	echo Copying files...; \
	(cd $(SRCDIR); tar cf - .)|(cd $$version; tar xf -; make dist_clean); \
	echo Building full NDA distribution...; \
	tar cf - $$version | gzip -9 >$$version-nda.tar.gz; \
	if (cd $$version; make keep_dbapi || exit 1); then \
	  mv $$version/dbapi.tar . || exit 1; \
	else :; fi; \
	(cd $$version; make censor_dbapi || exit 1); \
	echo Building full ordinary distribution...; \
	tar cf - $$version | gzip -9 >$$version.tar.gz; \
	(cd $$version; make censor_crypto || exit 1); \
	echo Building lobotomized ordinary distribution...; \
	tar cf - $$version | gzip -9 >$$version-int.tar.gz; \
	(cd $$version; tar xf ../dbapi.tar || exit 1); \
	echo Building lobotomized NDA distribution...; \
	tar cf - $$version | gzip -9 >$$version-nda-int.tar.gz
