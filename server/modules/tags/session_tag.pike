// This is a roxen module. Copyright © 2001, Roxen IS.
//

#include <module.h>
inherit "module";

constant cvs_version = "$Id: session_tag.pike,v 1.2 2001/04/22 23:41:06 nilsson Exp $";
constant thread_safe = 1;
constant module_type = MODULE_TAG;
constant module_name = "Session tag module";
constant module_doc  = "This module provides the session tag";

class TagSession {
  inherit RXML.Tag;
  constant name = "session";
  mapping(string:RXML.Type) req_arg_types = ([ "id" : RXML.t_text(RXML.PEnt) ]);

  class Frame {
    inherit RXML.Frame;
    mapping vars;
    string scope_name;

    array do_enter(RequestID id) {
      vars = cache.get_session_data(args->id) || ([]);
      scope_name = args->scope || "session";
    }

    array do_return(RequestID id) {
      result = content;
      if(!sizeof(vars)) return 0;
      cache.set_session_data(vars, args->id, args->life?(int)args->life+time(1):0,
			     !!args["force-db"] );
    }
  }
}

class TagClearSession {
  inherit RXML.Tag;
  constant name = "clear-session";
  constant flags = RXML.FLAG_EMPTY_ELEMENT;
  mapping(string:RXML.Type) req_arg_types = ([ "id" : RXML.t_text(RXML.PEnt) ]);

  class Frame {
    inherit RXML.Frame;

    array do_enter(RequestID id) {
      cache.clear_session(args->id);
    }
  }
}

TAGDOCUMENTATION;
#ifdef manual
constant tagdoc = ([
  "session":#"<desc cont='cont'><p>Creates a session bound scope. The session is identified
by a session key, given as argument to the session tag. The session key could be e.g.
a key generated by &amp;unique-id;, tansported by form variables.</p></desc>

<attr name='id' value='string' required='1'><p>The key that identifies the session.
Could e.g. be a name, an IP adress or a cookie.</p></attr>

<attr name='life' value='number' default='900'><p>Determines how many seconds the session is guaranteed to
persist on the server side. Values over 900 means that the session variables will be stored in a
disk based database when they have not been used within 900 seconds.</p></attr>

<attr name='force-db'>If used, the session variables will be immediatly written to the database.
Normally, e.g. when not defined, session variables are only moved to the database when they have
not been used for a while (given that they still have \"time to live\", as determined by the life
attribute). This will increase the integrity of the session, since the variables will survive a
server reboot, but it will also decrease performance somewhat.</attr>
",
  "clear-session":#"<desc tag='tag'><p>Clear a session from all its content.</p></desc>

<attr name='id' value'string' required='1'><p>The key that identifies the session.</p></attr>
"
]);
#endif
