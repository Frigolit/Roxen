#!/bin/sh
# init.d script for ChiliMoon. Set the variables below to something
# fitting.. This is only an example script.
#############

# The server directory where the 'start' script is located.
#
chilihome=/usr/local/ChiliMoon

# Set these to kill all processes owned by wwwuser on stop. Useful to
# reap CGI scripts.
#
# killallwww=yes
# wwwuser=www

umask 022

# If you want to start with another configuration directory. The path
# is relative to the server-X.Y.Z directory.
#
# configdir=../configurations

# Here you can add extra flags to the start script, like enabling or
# disabling threads.
# 
# flags="--with-threads"
# flags="--without-threads"

# The file to store the process ids in, to allow this script to stop,
# reload and restart the server. By default it's placed in the
# configuration directory, which ensures that it doesn't accidentally
# overwrite the pid file for another server instance.
#
# pidfile=$configdir/_chilimoon_pid


### You should not _have_ to change anything below here...

# chkconfig: - 90 20
# description:  ChiliMoon

if test x$configdir = x; then
  configdir=../configurations
else
  flags="$flags --config-dir=$configdir"
fi

test x$pidfile = x && pidfile=$configdir/_chilimoon_pid
flags="$flags --pid-file=$pidfile"

find_server_dir()
{
  (
    cd "$chilihome" >/dev/null 2>&1 &&
    for dir in server*; do
      ( cd "$dir" >/dev/null 2>&1 &&
	test -f "$configdir/server_version" &&
	echo "$chilihome/`cat \"$configdir/server_version\"`"
      ) && return
    done
    echo "$chilihome/server"
  )
}
chilihome=`find_server_dir`

# Some systems have stupid rc scripts that are written in shells with job
# support (read Linux/bash), and send SIGHUP when they finish.
trap "" 1

case $1 in
  'start_msg')
    echo "Start ChiliMOon in $chilihome."
    exit 0
  ;;
  'stop_msg')
    echo "Stop ChiliMoon in $chilihome."
    exit 0
  ;;

  'start')
    echo "Starting ChiliMoon in $chilihome..."
    cd $chilihome && {
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 "$pid" 2>/dev/null; then
	  echo "ChiliMoon is already running (start script pid $pid)."
	  :
	else false; fi
      } < $pidfile && exit 0
      if [ -x $chilihome/start ]; then
	./start $flags 2>/dev/null
	echo "ChiliMoon started."
	exit 0
      fi
      echo "Cannot find a ChiliMoon installation in $chilihome."
    }
  ;;

  'reload')
    echo "Reloading configurations in ChiliMoon in $chilihome..."
    cd $chilihome && {
      if test -f "$pidfile" && read pid < $pidfile && test "$pid" != x; then
	echo "Sending SIGHUP to ChiliMoon process $pid."
	kill -1 $pid && exit 0
      fi
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 "$pid" 2>/dev/null; then
	  echo "The start script is currently forking a new server - nothing to do."
	  :
	else false; fi
      } < $pidfile && exit 0
      echo "ChiliMoon doesn't seem to be running."
      exit 1
    }
  ;;

  'restart')
    echo "Restarting ChiliMoon in $chilihome..."
    cd $chilihome && {
      if test -f "$pidfile" && read pid < $pidfile && test "$pid" != x; then
	echo "Sending SIGTERM to ChiliMoon process $pid."
	kill $pid && exit 0
      fi
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 $pid 2>/dev/null; then
	  echo "The start script is currently forking a new server - nothing to do."
	  :
	else false; fi
      } < $pidfile && exit 0
      echo "ChiliMoon doesn't seem to be running."
      echo "Starting ChiliMoon in $chilihome."
      if [ -x $chilihome/start ]; then
	./start $flags 2>/dev/null
	echo "ChiliMoon started."
	exit 0
      fi
      echo "Cannot find a ChiliMoon installation in $chilihome."
    }
  ;;

  'stop')
    echo "Stopping ChiliMoon in $chilihome..."
    cd $chilihome && {
      test -f "$pidfile" && {
	if read pid && read pid; then
	  echo "Sending SIGTERM to start script process $pid."
	  if kill "$pid"; then
	    while kill -0 $pid 2>/dev/null; do
	      sleep 1
	    done
	    echo "ChiliMoon stopped."
	    # Get all the CGI scripts... :-)
	    if [ x$killallwww = xyes ] ; then
	      echo "Killing all programs running as the $wwwuser user."
	      su $wwwuser -c "kill -9 -1"
	    fi
	    :
	  else false; fi
	else false; fi
      } < $pidfile && exit 0
      echo "ChiliMoon doesn't seem to be running."
    }
  ;;

  'debug')
    echo "Sending ChiliMoon SIGQUIT..."
    cd $chilihome && {
      test -f "$pidfile" && {
        if read pid && kill -QUIT "$pid" 2>/dev/null; then
          echo "ChiliMoon process found. Consult debug log for output."
          :
        else echo "pid $pid"; fi
      } < $pidfile && exit 0
      echo "ChiliMoon doesn't seem to be running."
      exit 1
    }
  ;;

  *)
    echo "Syntax: $0 [start|stop|start_msg|stop_msg|restart|reload|debug]"
  ;;
esac

exit 1
