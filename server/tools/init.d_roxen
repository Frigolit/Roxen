#!/bin/sh
# init.d script for Roxen. Set the variables below to something fitting..
# This is only an example script.
#############

# The server directory where the 'start' script is located.
#
roxenhome=/usr/local/roxen

# Set these to kill all processes owned by wwwuser on stop. Useful to
# reap CGI scripts.
#
# killallwww=yes
# wwwuser=www

umask 022

# If you want to start with another configuration directory. The path
# is relative to the server-X.Y.Z directory.
#
# configdir=../configurations

# Here you can add extra flags to the start script, like enabling or
# disabling threads.
# 
# flags="--with-threads"
# flags="--without-threads"

# The file to store the process ids in, to allow this script to stop,
# reload and restart the server. By default it's placed in the
# configuration directory, which ensures that it doesn't accidentally
# overwrite the pid file for another server instance.
#
# pidfile=$configdir/_roxen_pid

# Xauthority for CMS Instant
#
# If the Forms and Response module in CMS Instant is enabled Roxen has
# to connect to the X server during start. Two examples are provided,
# for Linux/gdm and Solaris/dtlogin. Note: don't forget the export row.
#
# XAUTHORITY=/var/gdm/:0.Xauth
# XAUTHORITY=`/bin/ls -1t /var/dt/A:0-* | /bin/head -1`
# export XAUTHORITY

### You should not _have_ to change anything below here...

# chkconfig: - 90 20
# description:  Roxen

if test x$configdir = x; then
  configdir=../configurations
else
  flags="$flags --config-dir=$configdir"
fi

test x$pidfile = x && pidfile=$configdir/_roxen_pid
flags="$flags --pid-file=$pidfile"

find_server_dir()
{
  (
    cd "$roxenhome" >/dev/null 2>&1 &&
    for dir in server*; do
      ( cd "$dir" >/dev/null 2>&1 &&
	test -f "$configdir/server_version" &&
	echo "$roxenhome/`cat \"$configdir/server_version\"`"
      ) && return
    done
    echo "$roxenhome/server"
  )
}
roxenhome=`find_server_dir`

# Some systems have stupid rc scripts that are written in shells with job
# support (read Linux/bash), and send SIGHUP when they finish.
trap "" 1

case $1 in
  'start_msg')
    echo "Start Roxen in $roxenhome."
    exit 0
  ;;
  'stop_msg')
    echo "Stop Roxen in $roxenhome."
    exit 0
  ;;

  'start')
    echo "Starting Roxen in $roxenhome..."
    cd $roxenhome && {
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 "$pid" 2>/dev/null; then
	  echo "Roxen is already running (start script pid $pid)."
	  :
	else false; fi
      } < $pidfile && exit 0
      if [ -x $roxenhome/start ]; then
	./start $flags 2>/dev/null
	echo "Roxen started."
	exit 0
      fi
      echo "Cannot find a Roxen installation in $roxenhome."
    }
  ;;

  'reload')
    echo "Reloading configurations in Roxen in $roxenhome..."
    cd $roxenhome && {
      if test -f "$pidfile" && read pid < $pidfile && test "$pid" != x; then
	echo "Sending SIGHUP to Roxen process $pid."
	kill -1 $pid && exit 0
      fi
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 "$pid" 2>/dev/null; then
	  echo "The start script is currently forking a new server - nothing to do."
	  :
	else false; fi
      } < $pidfile && exit 0
      echo "Roxen doesn't seem to be running."
      exit 1
    }
  ;;

  'restart')
    echo "Restarting Roxen in $roxenhome..."
    cd $roxenhome && {
      if test -f "$pidfile" && read pid < $pidfile && test "$pid" != x; then
	echo "Sending SIGTERM to Roxen process $pid."
	kill $pid && exit 0
      fi
      test -f "$pidfile" && {
	if read pid && read pid && kill -0 $pid 2>/dev/null; then
	  echo "The start script is currently forking a new server - nothing to do."
	  :
	else false; fi
      } < $pidfile && exit 0
      echo "Roxen doesn't seem to be running."
      echo "Starting Roxen in $roxenhome."
      if [ -x $roxenhome/start ]; then
	./start $flags 2>/dev/null
	echo "Roxen started."
	exit 0
      fi
      echo "Cannot find a Roxen installation in $roxenhome."
    }
  ;;

  'stop')
    echo "Stopping Roxen in $roxenhome..."
    cd $roxenhome && {
      test -f "$pidfile" && {
	if read pid && read pid; then
	  echo "Sending SIGTERM to start script process $pid."
	  if kill "$pid"; then
	    while kill -0 $pid 2>/dev/null; do
	      sleep 1
	    done
	    echo "Roxen stopped."
	    # Get all the CGI scripts... :-)
	    if [ x$killallwww = xyes ] ; then
	      echo "Killing all programs running as the $wwwuser user."
	      su $wwwuser -c "kill -9 -1"
	    fi
	    :
	  else false; fi
	else false; fi
      } < $pidfile && exit 0
      echo "Roxen doesn't seem to be running."
    }
  ;;

  'debug')
    echo "Sending Roxen SIGQUIT..."
    cd $roxenhome && {
      test -f "$pidfile" && {
        if read pid && kill -QUIT "$pid" 2>/dev/null; then
          echo "Roxen process found. Consult debug log for output."
          :
        else echo "pid $pid"; fi
      } < $pidfile && exit 0
      echo "Roxen doesn't seem to be running."
      exit 1
    }
  ;;

  *)
    echo "Syntax: $0 [start|stop|start_msg|stop_msg|restart|reload|debug]"
  ;;
esac

exit 1
