#include <module.h>
#include <roxen.h>
#include <stdio.h>
inherit "module";
inherit "roxenlib";

string dns_filename;
array(mapping) dns_data;
string dns_dbstatus;

string host_ip_no;

#define ZTTL     "Zone TTL Value"
#define ZREFRESH "Zone Refresh Time"
#define ZRETRY   "Zone Failed-Refresh Retry Time"
#define ZEXPIRE  "Zone Expire Time"
#define DBHOST   "Database Server Machine"
#define DBNAME   "Database Name"
#define DBUSER   "Database User Name"
#define DBPASS   "Database User Password"

void create()
{ defvar("DNS File", "/tmp/test-dns-hosts",
         "DNS File", TYPE_TEXT_FIELD,
         "The name of the file where the DNS server (typically "
         "<TT>in.named</TT>) expects to find the DNS zone master data.");

  defvar(DBHOST, "kopparorm.idonex.se",
         DBHOST, TYPE_TEXT_FIELD,
         "The name of the machine running the SQL database server.");

  defvar(DBNAME, "autosite",
         DBNAME, TYPE_TEXT_FIELD,
         "The name of the database in the SQL database server.");

  defvar(DBUSER, "auto",
         DBUSER, TYPE_TEXT_FIELD,
         "The user name used to login on the SQL database server.");

  defvar(DBPASS, "site",
         DBPASS, TYPE_TEXT_FIELD,
         "The password used to login on the SQL database server.");

  defvar(ZTTL, "1 day",
         ZTTL, TYPE_MULTIPLE_STRING,
         "Time-To-Live for a resource record in a cache?",
         ({ "12 hours", "1 day", "2 days", "3 days", "5 days", "1 week" })
        );

  defvar(ZREFRESH, "30 minutes",
         ZREFRESH, TYPE_MULTIPLE_STRING,
         "How long does a cached resource record last in a secondary server?",
          ({ "15 minutes", "30 minutes", "1 hour", "2 hours",
             "3 hours", "6 hours" })
        );

  defvar(ZRETRY, "5 minutes",
         ZRETRY, TYPE_MULTIPLE_STRING,
         "How long should a secondary server wait before retrying after "
         "failure to complete a refresh?",
         ({ "2 minutes", "5 minutes", "10 minuters", "15 minutes" })
        );

  defvar(ZEXPIRE, "1 week",
         ZEXPIRE, TYPE_MULTIPLE_STRING,
         "How long, at most, should secondary servers remember resource "
         "records for this domain if the refresh keeps failing?",
         ({ "1 day", "2 days", "3 days", "5 days", "1 week", "2 weeks" })
        );

  roxen->set_var("AutoDNS_hook", this_object());
}

int query_timeunit(string var, int defaultvalue)
{ int x; string value = query(var); string dummy;
  if (sscanf(value, "%d w%s", x, dummy) == 2) return x * 3600 * 24 * 7;
  if (sscanf(value, "%d d%s", x, dummy) == 2) return x * 3600 * 24;
  if (sscanf(value, "%d h%s", x, dummy) == 2) return x * 3600;
  if (sscanf(value, "%d m%s", x, dummy) == 2) return x * 60;
  if (sscanf(value, "%d s%s", x, dummy) == 2) return x;
  return defaultvalue;
}

array register_module()
{ return ({ 0, "AutoSite DNS Administration Module", "", 0, 1 });
}

string database_status
       = "will try to connect.";

string dns_update_status
       = "none since restart.";

string status()
{ return "<B>DNS Administration Status</B>\n<DL>"
       + "\n <DT>Database Status:<DD>" +database_status
       + "\n <DT>DNS Update:<DD>" + dns_update_status
       + "\n</DL>\n";
}

object AutoSiteDB;

int update_scheduled = 0;

void do_update()
// Update the DNS master file from the DOMAINS table.
{ if (!AutoSiteDB)
  { // If the database is not available, leave the
    // update_schduled variable in its current state,
    // return for now, and let the update take until
    // the next time start() manages to open a connection
    // to the database.
    dns_update_status = "<P><B>DNS Update</B>: pending. Database presently unavailable.";
    return;
  }
  string fname = query("DNS File Name");
  object data  = AutoSiteDB->big_query("SELECT domain_address FROM domains");
  object file  = Stdio.FILE("/tmp/new_dns_zone", "wt");
  object row;

  if (!data)
  { dns_update_status = "no domains found in database.";
    call_out(do_update, 300); // try again in 5 minutes.
    return;
  }

  if (!file)
  { dns_update_status = "unable to write zone master file.";
    call_out(do_update, 300); // try again in 5 minutes.
    return;
  }

  int    ttl     = query_timeunit(ZTTL, 50000);
  string hostname= gethostname();

  file->write(";;; This file is automatically generated from the DOMAINS\n");
  file->write(";;; database in AutoSiteDB. Do not edit manually.\n");
  file->write(hostname + ". " + ttl + " IN SOA " + hostname +
         ". hostmaster." + hostname + ". " + time() +
         " " + query_timeunit(ZREFRESH, 2000) +
         " " + query_timeunit(ZRETRY, 500) +
         " " + query_timeunit(ZEXPIRE, 500000) +
         " " + ttl + "\n");

  while (row = data->fetch_row())
  { int i;
    file->write("\n;;; Data for subdomain " + row[0] + "\n");

    file->write(row[0] + ".  " + ttl + " IN  A     " + host_ip_no + "\n");
    for(i = -3; i < strlen(row[0]); ++i) file->write(" ");
    file->write(ttl + " IN  MX    10 " + row[0] + "\n");
  }
  file->close();
  dns_update_status = "completed " + ctime(time())[4..];

  if (!mv("/tmp/new_dns_zone", fname))
  { dns_update_status += ", but failed to install new zone master file as '" +
                fname + "'";
    call_out(do_update, 300); // try again in 5 minutes
    return;
  }

  update_scheduled = 0;
}

void update()
{ // Schedule an update if one is not already scheduled.
  if (update_scheduled) return;
  update_scheduled = 1;
  call_out(do_update, 60);
}

void start()
{ if (! host_ip_no)
     host_ip_no = gethostbyname(gethostname())[1][0];
  
  if (! AutoSiteDB)
  { string dbhost = query(DBHOST);
    string dbname = query(DBNAME);
    string user   = query(DBUSER);
    string passwd = query(DBPASS);
    string dburl  = "mysql://";
    if (user)
    { dburl += user;
      if (passwd) dburl += ":" + passwd;
      dburl += "@";
    }
    dburl += dbhost + "/" + dbname;
     
    AutoSiteDB = Sql.sql(dburl);

    if (AutoSiteDB)
    { database_status = "connected (" + AutoSiteDB->host_info() + ")";
      call_out(update, 50);
    }
    else
      database_status = "unavailable.";

    if (update_scheduled) call_out(do_update, 15);
  }
}

